version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

executors:
  base:
    docker:
      - image: cimg/base:stable

parameters:
  other-lambda:
    type: boolean
    default: false
  proxy-lambda:
    type: boolean
    default: false
  infrastructure-dev:
    type: boolean
    default: false
  infrastructure-staging:
    type: boolean
    default: false
  infrastructure-production:
    type: boolean
    default: false

# each lambda needs it's own set of jobs
# can only use pipeline parameter boolean in the workflow
    
jobs:
  unit-test-lambda:
    parameters:
      lambda_name:
        type: string
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - run:
          name: test << parameters.lambda_name >>
          command: |
            cd lambdas/<< parameters.lambda_name >>
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            python -m unittest

  tf-init-and-plan-lambda-staging:
    parameters:
      lambda_name:
        type: string
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - run:
          name: install terraform
          command: |
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install terraform
      - run:
          name: terraform init & plan << parameters.lambda_name >>
          command: |
            cd lambdas/<< parameters.lambda_name >>/env/staging
            export AWS_ACCESS_KEY_ID=$STAGING_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$STAGING_SECRET_ACCESS_KEY
            terraform init -backend-config="access_key=${AWS_ACCESS_KEY_ID}" -backend-config="secret_key=${AWS_SECRET_ACCESS_KEY}"
            terraform plan -out=tfplan

  tf-deploy-lambda-staging:
    parameters:
      lambda_name:
        type: string
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - run:
          name: install terraform
          command: |
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install terraform
      - run:
          name: terraform init & plan << parameters.lambda_name >>
          command: |
            cd lambdas/<< parameters.lambda_name >>/env/staging
            export AWS_ACCESS_KEY_ID=$STAGING_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$STAGING_SECRET_ACCESS_KEY
            terraform init -backend-config="access_key=${AWS_ACCESS_KEY_ID}" -backend-config="secret_key=${AWS_SECRET_ACCESS_KEY}"
            terraform plan -out=tfplan
      - run:
          name: terraform apply << parameters.lambda_name >>
          command: |
            cd lambdas/other-lambda/env/staging
            export AWS_ACCESS_KEY_ID=$STAGING_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$STAGING_SECRET_ACCESS_KEY
            terraform apply tfplan

  infrastructure-dev:
      docker:
        - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
      steps:
        - checkout
        - run:
            name: terraform init & plan
            command: |
              cd infrastructure/env/dev
              export AWS_ACCESS_KEY_ID=$DEV_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$DEV_SECRET_ACCESS_KEY
              terraform init -backend-config="access_key=${AWS_ACCESS_KEY_ID}" -backend-config="secret_key=${AWS_SECRET_ACCESS_KEY}"
              terraform plan -out=tfplan
  infrastructure-staging:
      docker:
        - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
      steps:
        - checkout
        - run:
            name: terraform init & plan
            command: |
              cd infrastructure/env/staging
              export AWS_ACCESS_KEY_ID=$STAGING_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$STAGING_SECRET_ACCESS_KEY
              terraform init -backend-config="access_key=${AWS_ACCESS_KEY_ID}" -backend-config="secret_key=${AWS_SECRET_ACCESS_KEY}"
              terraform plan -out=tfplan
        - run:
            name: terraform apply
            command: |
              cd infrastructure/env/staging
              export AWS_ACCESS_KEY_ID=$STAGING_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$STAGING_SECRET_ACCESS_KEY
              terraform apply tfplan
  infrastructure-production:
      executor: base
      steps:
        - run: 
            command: |
              echo "infrastructure"
              
workflows:
  other-lambda-only:
    when:
      and:
        - << pipeline.parameters.other-lambda >>
        - not: << pipeline.parameters.infrastructure-staging >>
    jobs:
      - unit-test-lambda:
          lambda_name: other-lambda
      - tf-init-and-plan-lambda-staging:
          lambda_name: other-lambda
          requires:
            - unit-test-lambda
      - tf-deploy-lambda-staging:
          lambda_name: other-lambda
          requires:
            - tf-init-and-plan-lambda-staging
          filters:
            branches:
              only:
                - staging
  proxy-lambda-only:
    when:
      and:
        - << pipeline.parameters.proxy-lambda >>
        - not: << pipeline.parameters.infrastructure-staging >>
    jobs:
      - unit-test-lambda:
          name: test proxy-lambda
          lambda_name: proxy-lambda
      - tf-init-and-plan-lambda-staging:
          name: init & plan proxy-lambda
          lambda_name: proxy-lambda
          requires:
            - unit-test-lambda
      - tf-deploy-lambda-staging:
          name: deploy proxy-lambda staging
          lambda_name: proxy-lambda
          requires:
            - tf-init-and-plan-lambda-staging
          filters:
            branches:
              only:
                - staging

  deploy-infrastructure-staging:
    when: 
      and:
        - << pipeline.parameters.infrastructure-staging >>
        - not: << pipeline.parameters.other-lambda >>
        - not: << pipeline.parameters.proxy-lambda >>
    jobs:
      - infrastructure-staging:
          filters:
            branches:
              only:
                - staging

  deploy-infrastructure-production:
    when: << pipeline.parameters.infrastructure-production >>
    jobs:
      - infrastructure-production:
          filters:
            branches:
              only:
                - main